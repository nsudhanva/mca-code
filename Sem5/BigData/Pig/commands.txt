ord_dup = load 'orders_dup.json' using JsonLoader('
    ord_id: chararray,
    uname: chararray,
    prod: chararray,
    qty: int,
    amt: double,
    order_date: chararray
');

orders_3 = limit orders 3

orders_desc = order orders by order_id desc;
orders_asc = order orders by product asc;
split orders into ord_qty_1 if (quantity == 1), ord_qty_more if (quantity > 1)

col = load 'NYPD.csv' using PigStorage(',');
col_useful = foreach col_limit generate $0 as date, $2 as borough, $3 as zipcode, TRIM($6) as
location, $11+$13+$15+$17 as injured, TRIM($19) as reason;

col_reasons = group col_reason_injured by reason;
col_borough_sample = limit col-reasons-borough 2;

tot_injured_reason = foreach col_reason generate group, SUM(col_reason_injured.injured);

describe tot_injured_reason;
foreach col_reasons_borough generate group, COUNT(col_reason_injured);
name_trade = join names by symbol, trades by symbol;
name_trade_left = join names by symbol left outer, trades by symbol;
name_trade_right = join names by symbol right outer, trades by symbol;

names_trade_cross = cross names, trades;
name_trade_cjoin = filter names_trades_cross by names::symbol == trades::symbol;

all_names = union names, other_names;
dump all_names;
describe all_names;

names = load 'names.csv' using PigStorage(',') as  
{
    symbol: chararray,
    name: chararray,
    revenue: chararray
}

trades = local 'trades.csv' using PigStorage(',') as  
{
    symbol: chararray,
    low: double,
    open: double,
    high: double,
    close: double,
    date: datetime
}

stud_act = load 'student_activities.txt'

stud_act_bg = foreach stud_act generate stud_id, name, 
TOBAG(act1, act2, act3, act4) as activities 


col_group = col_inj by (borough, reason);


col_total = foreach col_group generate group.borough, group.reason, COUNT(col_inj) as total; 
col_total = filter col_total_raw by borough is not null and reason is not null 

col_stats = foreach col_total_group {
    total_col = SUM(col_total.total);
    generate total_col
}

col_stats = foreach col_total_group {
    total_col = SUM(col_total.total);
    generate group, total_col
}

